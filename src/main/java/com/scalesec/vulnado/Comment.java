\npackage com.scalesec.vulnado;\n\nimport java.sql.*;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.UUID;\n\npublic class Comment {\n    private final String id;\n    private final String username;\n    private final String body;\n    private final Timestamp created_on;\n\n    public Comment(String id, String username, String body, Timestamp created_on) {\n        this.id = id;\n        this.username = username;\n        this.body = body;\n        this.created_on = created_on;\n    }\n\n    public static Comment create(String username, String body) {\n        long time = new Date().getTime();\n        Timestamp timestamp = new Timestamp(time);\n        Comment comment = new Comment(UUID.randomUUID().toString(), username, body, timestamp);\n        try {\n            if (comment.commit()) {\n                return comment;\n            } else {\n                throw new BadRequest(\"Unable to save comment\");\n            }\n        } catch (Exception e) {\n            throw new ServerError(e.getMessage());\n        }\n    }\n\n    public static List\u003cComment\u003e fetch_all() {\n        List\u003cComment\u003e comments = new ArrayList\u003c\u003e();\n        try (Connection cxn = Postgres.connection()) {\n            String query = \"select * from comments;\";\n            PreparedStatement pStatement = cxn.prepareStatement(query);\n            ResultSet rs = pStatement.executeQuery();\n            while (rs.next()) {\n                String id = rs.getString(\"id\");\n                String username = rs.getString(\"username\");\n                String body = rs.getString(\"body\");\n                Timestamp created_on = rs.getTimestamp(\"created_on\");\n                Comment c = new Comment(id, username, body, created_on);\n                comments.add(c);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return comments;\n    }\n\n    public static Boolean delete(String id) {\n        try {\n            String sql = \"DELETE FROM comments where id = ?\";\n            Connection con = Postgres.connection();\n            PreparedStatement pStatement = con.prepareStatement(sql);\n            pStatement.setString(1, id);\n            return 1 == pStatement.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    private Boolean commit() throws SQLException {\n        String sql = \"INSERT INTO comments (id, username, body, created_on) VALUES (?,?,?,?)\";\n        Connection con = Postgres.connection();\n        PreparedStatement pStatement = con.prepareStatement(sql);\n        pStatement.setString(1, this.id);\n        pStatement.setString(2, this.username);\n        pStatement.setString(3, this.body);\n        pStatement.setTimestamp(4, this.created_on);\n        return 1 == pStatement.executeUpdate();\n    }\n}\n